{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\firstweb\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FaArrowLeft, FaArrowRight, FaStar, FaThumbsUp } from \"react-icons/fa\";\nimport MoviePoster from './MoviePoster';\nimport '../App.css';\n\n// TMDB API key and URLs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = '3fd2be6f0c70a2a598f084ddfb75487c'; // This is a demo key for testing\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst MovieList = () => {\n  _s();\n  var _genres$find;\n  const navigate = useNavigate();\n\n  // State for movies\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // User preferences for recommendations\n  const [userPreferences, setUserPreferences] = useState({\n    favoriteGenres: [],\n    likedMovies: []\n  });\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState(0); // 0 means all genres\n  const [genres, setGenres] = useState([]);\n\n  // Fetch genres\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\n        const data = await response.json();\n        setGenres([{\n          id: 0,\n          name: 'All'\n        }, ...data.genres]);\n      } catch (err) {\n        console.error('Error fetching genres:', err);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Fetch popular movies\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setLoading(true);\n      try {\n        let url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n        if (selectedGenre !== 0) {\n          url = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}`;\n        }\n        const response = await fetch(url);\n        const data = await response.json();\n\n        // Transform the data to match our format\n        const transformedMovies = data.results.map(movie => ({\n          id: movie.id,\n          title: movie.title,\n          year: movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown',\n          rating: movie.vote_average,\n          genre: movie.genre_ids,\n          poster: movie.poster_path ? `${IMG_URL}${movie.poster_path}` : null,\n          overview: movie.overview\n        }));\n        setMovies(transformedMovies);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch movies. Please try again later.');\n        console.error('Error fetching movies:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre]);\n\n  // Like/favorite a movie\n  const likeMovie = movieId => {\n    const movie = movies.find(m => m.id === movieId);\n    if (movie) {\n      // Add movie to liked movies\n      const likedMovies = [...userPreferences.likedMovies, movieId];\n\n      // Update favorite genres based on this movie\n      const movieGenres = movie.genre;\n      const favoriteGenres = [...new Set([...userPreferences.favoriteGenres, ...movieGenres])];\n      setUserPreferences({\n        favoriteGenres,\n        likedMovies\n      });\n    }\n  };\n\n  // Generate recommendations based on user preferences\n  useEffect(() => {\n    if (userPreferences.favoriteGenres.length > 0 && movies.length > 0) {\n      // Get recommendations based on favorite genres and not already liked\n      const recommendations = movies.filter(movie => !userPreferences.likedMovies.includes(movie.id)).filter(movie => {\n        return movie.genre.some(genre => userPreferences.favoriteGenres.includes(genre));\n      }).sort((a, b) => b.rating - a.rating); // Sort by rating\n\n      setRecommendedMovies(recommendations);\n    }\n  }, [userPreferences, movies]);\n\n  // Function to get genre names for a movie\n  const getGenreNames = genreIds => {\n    if (!genres.length || !genreIds) return 'Unknown';\n    return genreIds.map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : null;\n    }).filter(Boolean).join(', ');\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading movies...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back-arrow\",\n      onClick: () => navigate(\"/home\"),\n      children: /*#__PURE__*/_jsxDEV(FaArrowLeft, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"genre-filter\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Filter by Genre: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedGenre,\n        onChange: e => setSelectedGenre(Number(e.target.value)),\n        style: {\n          padding: '8px',\n          marginLeft: '10px',\n          borderRadius: '4px'\n        },\n        children: genres.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: genre.id,\n          children: genre.name\n        }, genre.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), recommendedMovies.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommended-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recommended For You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-grid\",\n        children: recommendedMovies.slice(0, 3).map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          children: [/*#__PURE__*/_jsxDEV(MoviePoster, {\n            posterUrl: movie.poster,\n            title: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [movie.title, \" (\", movie.year, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rating\",\n            children: [/*#__PURE__*/_jsxDEV(FaStar, {\n              className: \"star-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 19\n            }, this), \" \", movie.rating.toFixed(1), \"/10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"genres\",\n            children: [\"Genre: \", getGenreNames(movie.genre)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"overview\",\n            children: [movie.overview.substring(0, 100), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => likeMovie(movie.id),\n            className: \"like-button\",\n            disabled: userPreferences.likedMovies.includes(movie.id),\n            children: [/*#__PURE__*/_jsxDEV(FaThumbsUp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 19\n            }, this), \" \", userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)]\n        }, `rec-${movie.id}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"All Movies \", selectedGenre !== 0 ? `- ${(_genres$find = genres.find(g => g.id === selectedGenre)) === null || _genres$find === void 0 ? void 0 : _genres$find.name}` : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(MoviePoster, {\n          posterUrl: movie.poster,\n          title: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [movie.title, \" (\", movie.year, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rating\",\n          children: [/*#__PURE__*/_jsxDEV(FaStar, {\n            className: \"star-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), \" \", movie.rating.toFixed(1), \"/10\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"genres\",\n          children: [\"Genre: \", getGenreNames(movie.genre)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"overview\",\n          children: [movie.overview.substring(0, 100), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => likeMovie(movie.id),\n          className: `like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`,\n          disabled: userPreferences.likedMovies.includes(movie.id),\n          children: [/*#__PURE__*/_jsxDEV(FaThumbsUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), \" \", userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"er2uyMzmXc/t4UmX6MjGbE0IGMM=\", false, function () {\n  return [useNavigate];\n});\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","FaArrowLeft","FaArrowRight","FaStar","FaThumbsUp","MoviePoster","jsxDEV","_jsxDEV","API_KEY","BASE_URL","IMG_URL","MovieList","_s","_genres$find","navigate","movies","setMovies","loading","setLoading","error","setError","userPreferences","setUserPreferences","favoriteGenres","likedMovies","recommendedMovies","setRecommendedMovies","selectedGenre","setSelectedGenre","genres","setGenres","fetchGenres","response","fetch","data","json","id","name","err","console","fetchMovies","url","transformedMovies","results","map","movie","title","year","release_date","Date","getFullYear","rating","vote_average","genre","genre_ids","poster","poster_path","overview","likeMovie","movieId","find","m","movieGenres","Set","length","recommendations","filter","includes","some","sort","a","b","getGenreNames","genreIds","g","Boolean","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","Number","target","style","padding","marginLeft","borderRadius","slice","posterUrl","toFixed","substring","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Downloads/firstweb/src/components/MovieList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FaArrowLeft, FaArrowRight, FaStar, FaThumbsUp } from \"react-icons/fa\";\r\nimport MoviePoster from './MoviePoster';\r\nimport '../App.css';\r\n\r\n// TMDB API key and URLs\r\nconst API_KEY = '3fd2be6f0c70a2a598f084ddfb75487c'; // This is a demo key for testing\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\r\n\r\nconst MovieList = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // State for movies\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // User preferences for recommendations\r\n  const [userPreferences, setUserPreferences] = useState({\r\n    favoriteGenres: [],\r\n    likedMovies: []\r\n  });\r\n\r\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState(0); // 0 means all genres\r\n  const [genres, setGenres] = useState([]);\r\n\r\n  // Fetch genres\r\n  useEffect(() => {\r\n    const fetchGenres = async () => {\r\n      try {\r\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\r\n        const data = await response.json();\r\n        setGenres([{ id: 0, name: 'All' }, ...data.genres]);\r\n      } catch (err) {\r\n        console.error('Error fetching genres:', err);\r\n      }\r\n    };\r\n    \r\n    fetchGenres();\r\n  }, []);\r\n\r\n  // Fetch popular movies\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      setLoading(true);\r\n      try {\r\n        let url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\r\n        \r\n        if (selectedGenre !== 0) {\r\n          url = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}`;\r\n        }\r\n        \r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        \r\n        // Transform the data to match our format\r\n        const transformedMovies = data.results.map(movie => ({\r\n          id: movie.id,\r\n          title: movie.title,\r\n          year: movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown',\r\n          rating: movie.vote_average,\r\n          genre: movie.genre_ids,\r\n          poster: movie.poster_path ? `${IMG_URL}${movie.poster_path}` : null,\r\n          overview: movie.overview\r\n        }));\r\n        \r\n        setMovies(transformedMovies);\r\n        setError(null);\r\n      } catch (err) {\r\n        setError('Failed to fetch movies. Please try again later.');\r\n        console.error('Error fetching movies:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchMovies();\r\n  }, [selectedGenre]);\r\n\r\n  // Like/favorite a movie\r\n  const likeMovie = (movieId) => {\r\n    const movie = movies.find(m => m.id === movieId);\r\n    if (movie) {\r\n      // Add movie to liked movies\r\n      const likedMovies = [...userPreferences.likedMovies, movieId];\r\n      \r\n      // Update favorite genres based on this movie\r\n      const movieGenres = movie.genre;\r\n      const favoriteGenres = [...new Set([...userPreferences.favoriteGenres, ...movieGenres])];\r\n      \r\n      setUserPreferences({\r\n        favoriteGenres,\r\n        likedMovies\r\n      });\r\n    }\r\n  };\r\n\r\n  // Generate recommendations based on user preferences\r\n  useEffect(() => {\r\n    if (userPreferences.favoriteGenres.length > 0 && movies.length > 0) {\r\n      // Get recommendations based on favorite genres and not already liked\r\n      const recommendations = movies\r\n        .filter(movie => !userPreferences.likedMovies.includes(movie.id))\r\n        .filter(movie => {\r\n          return movie.genre.some(genre => userPreferences.favoriteGenres.includes(genre));\r\n        })\r\n        .sort((a, b) => b.rating - a.rating); // Sort by rating\r\n      \r\n      setRecommendedMovies(recommendations);\r\n    }\r\n  }, [userPreferences, movies]);\r\n\r\n  // Function to get genre names for a movie\r\n  const getGenreNames = (genreIds) => {\r\n    if (!genres.length || !genreIds) return 'Unknown';\r\n    \r\n    return genreIds\r\n      .map(id => {\r\n        const genre = genres.find(g => g.id === id);\r\n        return genre ? genre.name : null;\r\n      })\r\n      .filter(Boolean)\r\n      .join(', ');\r\n  };\r\n\r\n  if (loading) return <div className=\"loading\">Loading movies...</div>;\r\n  if (error) return <div className=\"error\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"back-arrow\" onClick={() => navigate(\"/home\")}>\r\n        <FaArrowLeft />\r\n      </div>\r\n      \r\n      <h2>Movies</h2>\r\n      \r\n      {/* Genre Filter */}\r\n      <div className=\"genre-filter\">\r\n        <label>Filter by Genre: </label>\r\n        <select \r\n          value={selectedGenre} \r\n          onChange={(e) => setSelectedGenre(Number(e.target.value))}\r\n          style={{ padding: '8px', marginLeft: '10px', borderRadius: '4px' }}\r\n        >\r\n          {genres.map(genre => (\r\n            <option key={genre.id} value={genre.id}>{genre.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      {/* Recommended Movies Section */}\r\n      {recommendedMovies.length > 0 && (\r\n        <div className=\"recommended-section\">\r\n          <h3>Recommended For You</h3>\r\n          <div className=\"movie-grid\">\r\n            {recommendedMovies.slice(0, 3).map(movie => (\r\n              <div key={`rec-${movie.id}`} className=\"movie-card\">\r\n                <MoviePoster posterUrl={movie.poster} title={movie.title} />\r\n                <h4>{movie.title} ({movie.year})</h4>\r\n                <div className=\"rating\">\r\n                  <FaStar className=\"star-icon\" /> {movie.rating.toFixed(1)}/10\r\n                </div>\r\n                <p className=\"genres\">Genre: {getGenreNames(movie.genre)}</p>\r\n                <p className=\"overview\">{movie.overview.substring(0, 100)}...</p>\r\n                <button \r\n                  onClick={() => likeMovie(movie.id)}\r\n                  className=\"like-button\"\r\n                  disabled={userPreferences.likedMovies.includes(movie.id)}\r\n                >\r\n                  <FaThumbsUp /> {userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like'}\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* All Movies Section */}\r\n      <h3>All Movies {selectedGenre !== 0 ? `- ${genres.find(g => g.id === selectedGenre)?.name}` : ''}</h3>\r\n      <div className=\"movie-grid\">\r\n        {movies.map(movie => (\r\n          <div key={movie.id} className=\"movie-card\">\r\n            <MoviePoster posterUrl={movie.poster} title={movie.title} />\r\n            <h4>{movie.title} ({movie.year})</h4>\r\n            <div className=\"rating\">\r\n              <FaStar className=\"star-icon\" /> {movie.rating.toFixed(1)}/10\r\n            </div>\r\n            <p className=\"genres\">Genre: {getGenreNames(movie.genre)}</p>\r\n            <p className=\"overview\">{movie.overview.substring(0, 100)}...</p>\r\n            <button \r\n              onClick={() => likeMovie(movie.id)}\r\n              className={`like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`}\r\n              disabled={userPreferences.likedMovies.includes(movie.id)}\r\n            >\r\n              <FaThumbsUp /> {userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like'}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}