{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\firstweb\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FaArrowLeft, FaStar, FaThumbsUp, FaClock, FaFire } from \"react-icons/fa\";\nimport MoviePoster from './MoviePoster';\nimport '../App.css';\n\n// TMDB API key and URLs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = '3fd2be6f0c70a2a598f084ddfb75487c'; // This is a demo key for testing\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst MovieList = () => {\n  _s();\n  var _genres$find;\n  const navigate = useNavigate();\n\n  // State for movies\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [latestMovies, setLatestMovies] = useState([]);\n  const [topRatedMovies, setTopRatedMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // User preferences for recommendations\n  const [userPreferences, setUserPreferences] = useState({\n    favoriteGenres: [],\n    likedMovies: []\n  });\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState(0); // 0 means all genres\n  const [genres, setGenres] = useState([]);\n  const [activeTab, setActiveTab] = useState('popular');\n\n  // Fetch genres\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\n        const data = await response.json();\n        setGenres([{\n          id: 0,\n          name: 'All'\n        }, ...data.genres]);\n      } catch (err) {\n        console.error('Error fetching genres:', err);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Transform movie data to our format\n  const transformMovieData = movies => {\n    return movies.map(movie => ({\n      id: movie.id,\n      title: movie.title,\n      year: movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown',\n      rating: movie.vote_average,\n      genre: movie.genre_ids,\n      poster: movie.poster_path ? `${IMG_URL}${movie.poster_path}` : null,\n      overview: movie.overview,\n      release_date: movie.release_date\n    }));\n  };\n\n  // Fetch popular movies\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setLoading(true);\n      try {\n        // Popular movies\n        let popularUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n        if (selectedGenre !== 0) {\n          popularUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=popularity.desc`;\n        }\n        const popularResponse = await fetch(popularUrl);\n        const popularData = await popularResponse.json();\n\n        // Latest movies (now playing)\n        let latestUrl = `${BASE_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`;\n        if (selectedGenre !== 0) {\n          latestUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=release_date.desc`;\n        }\n        const latestResponse = await fetch(latestUrl);\n        const latestData = await latestResponse.json();\n\n        // Top rated movies\n        let topRatedUrl = `${BASE_URL}/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`;\n        if (selectedGenre !== 0) {\n          topRatedUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=vote_average.desc&vote_count.gte=1000`;\n        }\n        const topRatedResponse = await fetch(topRatedUrl);\n        const topRatedData = await topRatedResponse.json();\n        setPopularMovies(transformMovieData(popularData.results));\n        setLatestMovies(transformMovieData(latestData.results));\n        setTopRatedMovies(transformMovieData(topRatedData.results));\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch movies. Please try again later.');\n        console.error('Error fetching movies:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre]);\n\n  // Like/favorite a movie\n  const likeMovie = movieId => {\n    // Find the movie in any of our lists\n    const movie = popularMovies.find(m => m.id === movieId) || latestMovies.find(m => m.id === movieId) || topRatedMovies.find(m => m.id === movieId);\n    if (movie) {\n      // Add movie to liked movies\n      const likedMovies = [...userPreferences.likedMovies, movieId];\n\n      // Update favorite genres based on this movie\n      const movieGenres = movie.genre;\n      const favoriteGenres = [...new Set([...userPreferences.favoriteGenres, ...movieGenres])];\n      setUserPreferences({\n        favoriteGenres,\n        likedMovies\n      });\n    }\n  };\n\n  // Get all available movies for recommendations\n  const getAllMovies = () => {\n    // Combine all movies and remove duplicates\n    const allMovies = [...popularMovies, ...latestMovies, ...topRatedMovies];\n    const uniqueMovies = Array.from(new Map(allMovies.map(movie => [movie.id, movie])).values());\n    return uniqueMovies;\n  };\n\n  // Generate recommendations based on user preferences\n  useEffect(() => {\n    if (userPreferences.favoriteGenres.length > 0) {\n      const allMovies = getAllMovies();\n\n      // Get recommendations based on favorite genres and not already liked\n      const recommendations = allMovies.filter(movie => !userPreferences.likedMovies.includes(movie.id)).filter(movie => {\n        return movie.genre.some(genre => userPreferences.favoriteGenres.includes(genre));\n      }).sort((a, b) => b.rating - a.rating); // Sort by rating\n\n      setRecommendedMovies(recommendations);\n    }\n  }, [userPreferences, popularMovies, latestMovies, topRatedMovies]);\n\n  // Function to get genre names for a movie\n  const getGenreNames = genreIds => {\n    if (!genres.length || !genreIds) return 'Unknown';\n    return genreIds.map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : null;\n    }).filter(Boolean).join(', ');\n  };\n\n  // Get current movies based on active tab\n  const getCurrentMovies = () => {\n    switch (activeTab) {\n      case 'latest':\n        return latestMovies;\n      case 'topRated':\n        return topRatedMovies;\n      case 'popular':\n      default:\n        return popularMovies;\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading movies...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back-arrow\",\n      onClick: () => navigate(\"/home\"),\n      children: /*#__PURE__*/_jsxDEV(FaArrowLeft, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"genre-filter\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Filter by Genre: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedGenre,\n        onChange: e => setSelectedGenre(Number(e.target.value)),\n        style: {\n          padding: '8px',\n          marginLeft: '10px',\n          borderRadius: '4px'\n        },\n        children: genres.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: genre.id,\n          children: genre.name\n        }, genre.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), recommendedMovies.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommended-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recommended For You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-grid\",\n        children: recommendedMovies.slice(0, 4).map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          children: [/*#__PURE__*/_jsxDEV(MoviePoster, {\n            posterUrl: movie.poster,\n            title: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [movie.title, \" (\", movie.year, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rating\",\n            children: [/*#__PURE__*/_jsxDEV(FaStar, {\n              className: \"star-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), \" \", movie.rating.toFixed(1), \"/10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"genres\",\n            children: [\"Genre: \", getGenreNames(movie.genre)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"overview\",\n            children: [movie.overview.substring(0, 100), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => likeMovie(movie.id),\n            className: \"like-button\",\n            disabled: userPreferences.likedMovies.includes(movie.id),\n            children: [/*#__PURE__*/_jsxDEV(FaThumbsUp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 19\n            }, this), \" \", userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this)]\n        }, `rec-${movie.id}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-button ${activeTab === 'popular' ? 'active' : ''}`,\n        onClick: () => setActiveTab('popular'),\n        children: [/*#__PURE__*/_jsxDEV(FaFire, {\n          className: \"tab-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), \" Popular\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-button ${activeTab === 'latest' ? 'active' : ''}`,\n        onClick: () => setActiveTab('latest'),\n        children: [/*#__PURE__*/_jsxDEV(FaClock, {\n          className: \"tab-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), \" Latest Releases\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-button ${activeTab === 'topRated' ? 'active' : ''}`,\n        onClick: () => setActiveTab('topRated'),\n        children: [/*#__PURE__*/_jsxDEV(FaStar, {\n          className: \"tab-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), \" Top Rated\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [activeTab === 'popular' && 'Popular Movies', activeTab === 'latest' && 'Latest Releases', activeTab === 'topRated' && 'Top Rated Movies', selectedGenre !== 0 ? ` - ${(_genres$find = genres.find(g => g.id === selectedGenre)) === null || _genres$find === void 0 ? void 0 : _genres$find.name}` : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: getCurrentMovies().map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(MoviePoster, {\n          posterUrl: movie.poster,\n          title: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [movie.title, \" (\", movie.year, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rating\",\n          children: [/*#__PURE__*/_jsxDEV(FaStar, {\n            className: \"star-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), \" \", movie.rating.toFixed(1), \"/10\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"genres\",\n          children: [\"Genre: \", getGenreNames(movie.genre)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"overview\",\n          children: [movie.overview.substring(0, 100), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => likeMovie(movie.id),\n          className: `like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`,\n          disabled: userPreferences.likedMovies.includes(movie.id),\n          children: [/*#__PURE__*/_jsxDEV(FaThumbsUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), \" \", userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"aKtCdWYrQRTpCOU1CvlsqCtikA8=\", false, function () {\n  return [useNavigate];\n});\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","FaArrowLeft","FaStar","FaThumbsUp","FaClock","FaFire","MoviePoster","jsxDEV","_jsxDEV","API_KEY","BASE_URL","IMG_URL","MovieList","_s","_genres$find","navigate","popularMovies","setPopularMovies","latestMovies","setLatestMovies","topRatedMovies","setTopRatedMovies","loading","setLoading","error","setError","userPreferences","setUserPreferences","favoriteGenres","likedMovies","recommendedMovies","setRecommendedMovies","selectedGenre","setSelectedGenre","genres","setGenres","activeTab","setActiveTab","fetchGenres","response","fetch","data","json","id","name","err","console","transformMovieData","movies","map","movie","title","year","release_date","Date","getFullYear","rating","vote_average","genre","genre_ids","poster","poster_path","overview","fetchMovies","popularUrl","popularResponse","popularData","latestUrl","latestResponse","latestData","topRatedUrl","topRatedResponse","topRatedData","results","likeMovie","movieId","find","m","movieGenres","Set","getAllMovies","allMovies","uniqueMovies","Array","from","Map","values","length","recommendations","filter","includes","some","sort","a","b","getGenreNames","genreIds","g","Boolean","join","getCurrentMovies","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","Number","target","style","padding","marginLeft","borderRadius","slice","posterUrl","toFixed","substring","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Downloads/firstweb/src/components/MovieList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FaArrowLeft, FaStar, FaThumbsUp, FaClock, FaFire } from \"react-icons/fa\";\r\nimport MoviePoster from './MoviePoster';\r\nimport '../App.css';\r\n\r\n// TMDB API key and URLs\r\nconst API_KEY = '3fd2be6f0c70a2a598f084ddfb75487c'; // This is a demo key for testing\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\r\n\r\nconst MovieList = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // State for movies\r\n  const [popularMovies, setPopularMovies] = useState([]);\r\n  const [latestMovies, setLatestMovies] = useState([]);\r\n  const [topRatedMovies, setTopRatedMovies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // User preferences for recommendations\r\n  const [userPreferences, setUserPreferences] = useState({\r\n    favoriteGenres: [],\r\n    likedMovies: []\r\n  });\r\n\r\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState(0); // 0 means all genres\r\n  const [genres, setGenres] = useState([]);\r\n  const [activeTab, setActiveTab] = useState('popular');\r\n\r\n  // Fetch genres\r\n  useEffect(() => {\r\n    const fetchGenres = async () => {\r\n      try {\r\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\r\n        const data = await response.json();\r\n        setGenres([{ id: 0, name: 'All' }, ...data.genres]);\r\n      } catch (err) {\r\n        console.error('Error fetching genres:', err);\r\n      }\r\n    };\r\n    \r\n    fetchGenres();\r\n  }, []);\r\n\r\n  // Transform movie data to our format\r\n  const transformMovieData = (movies) => {\r\n    return movies.map(movie => ({\r\n      id: movie.id,\r\n      title: movie.title,\r\n      year: movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown',\r\n      rating: movie.vote_average,\r\n      genre: movie.genre_ids,\r\n      poster: movie.poster_path ? `${IMG_URL}${movie.poster_path}` : null,\r\n      overview: movie.overview,\r\n      release_date: movie.release_date\r\n    }));\r\n  };\r\n\r\n  // Fetch popular movies\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Popular movies\r\n        let popularUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\r\n        if (selectedGenre !== 0) {\r\n          popularUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=popularity.desc`;\r\n        }\r\n        const popularResponse = await fetch(popularUrl);\r\n        const popularData = await popularResponse.json();\r\n        \r\n        // Latest movies (now playing)\r\n        let latestUrl = `${BASE_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`;\r\n        if (selectedGenre !== 0) {\r\n          latestUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=release_date.desc`;\r\n        }\r\n        const latestResponse = await fetch(latestUrl);\r\n        const latestData = await latestResponse.json();\r\n        \r\n        // Top rated movies\r\n        let topRatedUrl = `${BASE_URL}/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`;\r\n        if (selectedGenre !== 0) {\r\n          topRatedUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=vote_average.desc&vote_count.gte=1000`;\r\n        }\r\n        const topRatedResponse = await fetch(topRatedUrl);\r\n        const topRatedData = await topRatedResponse.json();\r\n        \r\n        setPopularMovies(transformMovieData(popularData.results));\r\n        setLatestMovies(transformMovieData(latestData.results));\r\n        setTopRatedMovies(transformMovieData(topRatedData.results));\r\n        \r\n        setError(null);\r\n      } catch (err) {\r\n        setError('Failed to fetch movies. Please try again later.');\r\n        console.error('Error fetching movies:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchMovies();\r\n  }, [selectedGenre]);\r\n\r\n  // Like/favorite a movie\r\n  const likeMovie = (movieId) => {\r\n    // Find the movie in any of our lists\r\n    const movie = \r\n      popularMovies.find(m => m.id === movieId) || \r\n      latestMovies.find(m => m.id === movieId) || \r\n      topRatedMovies.find(m => m.id === movieId);\r\n\r\n    if (movie) {\r\n      // Add movie to liked movies\r\n      const likedMovies = [...userPreferences.likedMovies, movieId];\r\n      \r\n      // Update favorite genres based on this movie\r\n      const movieGenres = movie.genre;\r\n      const favoriteGenres = [...new Set([...userPreferences.favoriteGenres, ...movieGenres])];\r\n      \r\n      setUserPreferences({\r\n        favoriteGenres,\r\n        likedMovies\r\n      });\r\n    }\r\n  };\r\n\r\n  // Get all available movies for recommendations\r\n  const getAllMovies = () => {\r\n    // Combine all movies and remove duplicates\r\n    const allMovies = [...popularMovies, ...latestMovies, ...topRatedMovies];\r\n    const uniqueMovies = Array.from(new Map(allMovies.map(movie => [movie.id, movie])).values());\r\n    return uniqueMovies;\r\n  };\r\n\r\n  // Generate recommendations based on user preferences\r\n  useEffect(() => {\r\n    if (userPreferences.favoriteGenres.length > 0) {\r\n      const allMovies = getAllMovies();\r\n      \r\n      // Get recommendations based on favorite genres and not already liked\r\n      const recommendations = allMovies\r\n        .filter(movie => !userPreferences.likedMovies.includes(movie.id))\r\n        .filter(movie => {\r\n          return movie.genre.some(genre => userPreferences.favoriteGenres.includes(genre));\r\n        })\r\n        .sort((a, b) => b.rating - a.rating); // Sort by rating\r\n      \r\n      setRecommendedMovies(recommendations);\r\n    }\r\n  }, [userPreferences, popularMovies, latestMovies, topRatedMovies]);\r\n\r\n  // Function to get genre names for a movie\r\n  const getGenreNames = (genreIds) => {\r\n    if (!genres.length || !genreIds) return 'Unknown';\r\n    \r\n    return genreIds\r\n      .map(id => {\r\n        const genre = genres.find(g => g.id === id);\r\n        return genre ? genre.name : null;\r\n      })\r\n      .filter(Boolean)\r\n      .join(', ');\r\n  };\r\n\r\n  // Get current movies based on active tab\r\n  const getCurrentMovies = () => {\r\n    switch(activeTab) {\r\n      case 'latest':\r\n        return latestMovies;\r\n      case 'topRated':\r\n        return topRatedMovies;\r\n      case 'popular':\r\n      default:\r\n        return popularMovies;\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"loading\">Loading movies...</div>;\r\n  if (error) return <div className=\"error\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"back-arrow\" onClick={() => navigate(\"/home\")}>\r\n        <FaArrowLeft />\r\n      </div>\r\n      \r\n      <h2>Movies</h2>\r\n      \r\n      {/* Genre Filter */}\r\n      <div className=\"genre-filter\">\r\n        <label>Filter by Genre: </label>\r\n        <select \r\n          value={selectedGenre} \r\n          onChange={(e) => setSelectedGenre(Number(e.target.value))}\r\n          style={{ padding: '8px', marginLeft: '10px', borderRadius: '4px' }}\r\n        >\r\n          {genres.map(genre => (\r\n            <option key={genre.id} value={genre.id}>{genre.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      {/* Recommended Movies Section */}\r\n      {recommendedMovies.length > 0 && (\r\n        <div className=\"recommended-section\">\r\n          <h3>Recommended For You</h3>\r\n          <div className=\"movie-grid\">\r\n            {recommendedMovies.slice(0, 4).map(movie => (\r\n              <div key={`rec-${movie.id}`} className=\"movie-card\">\r\n                <MoviePoster posterUrl={movie.poster} title={movie.title} />\r\n                <h4>{movie.title} ({movie.year})</h4>\r\n                <div className=\"rating\">\r\n                  <FaStar className=\"star-icon\" /> {movie.rating.toFixed(1)}/10\r\n                </div>\r\n                <p className=\"genres\">Genre: {getGenreNames(movie.genre)}</p>\r\n                <p className=\"overview\">{movie.overview.substring(0, 100)}...</p>\r\n                <button \r\n                  onClick={() => likeMovie(movie.id)}\r\n                  className=\"like-button\"\r\n                  disabled={userPreferences.likedMovies.includes(movie.id)}\r\n                >\r\n                  <FaThumbsUp /> {userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like'}\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Movie Categories Tabs */}\r\n      <div className=\"movie-tabs\">\r\n        <button \r\n          className={`tab-button ${activeTab === 'popular' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('popular')}\r\n        >\r\n          <FaFire className=\"tab-icon\" /> Popular\r\n        </button>\r\n        <button \r\n          className={`tab-button ${activeTab === 'latest' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('latest')}\r\n        >\r\n          <FaClock className=\"tab-icon\" /> Latest Releases\r\n        </button>\r\n        <button \r\n          className={`tab-button ${activeTab === 'topRated' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('topRated')}\r\n        >\r\n          <FaStar className=\"tab-icon\" /> Top Rated\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Movies Section */}\r\n      <h3>\r\n        {activeTab === 'popular' && 'Popular Movies'}\r\n        {activeTab === 'latest' && 'Latest Releases'}\r\n        {activeTab === 'topRated' && 'Top Rated Movies'}\r\n        {selectedGenre !== 0 ? ` - ${genres.find(g => g.id === selectedGenre)?.name}` : ''}\r\n      </h3>\r\n      \r\n      <div className=\"movie-grid\">\r\n        {getCurrentMovies().map(movie => (\r\n          <div key={movie.id} className=\"movie-card\">\r\n            <MoviePoster posterUrl={movie.poster} title={movie.title} />\r\n            <h4>{movie.title} ({movie.year})</h4>\r\n            <div className=\"rating\">\r\n              <FaStar className=\"star-icon\" /> {movie.rating.toFixed(1)}/10\r\n            </div>\r\n            <p className=\"genres\">Genre: {getGenreNames(movie.genre)}</p>\r\n            <p className=\"overview\">{movie.overview.substring(0, 100)}...</p>\r\n            <button \r\n              onClick={() => likeMovie(movie.id)}\r\n              className={`like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`}\r\n              disabled={userPreferences.likedMovies.includes(movie.id)}\r\n            >\r\n              <FaThumbsUp /> {userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like'}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}