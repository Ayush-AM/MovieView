{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\firstweb\\\\src\\\\components\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FaArrowLeft, FaStar, FaThumbsUp, FaClock, FaFire, FaFilter, FaHeart, FaUser } from \"react-icons/fa\";\nimport MoviePoster from './MoviePoster';\nimport '../App.css';\n\n// TMDB API key and URLs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = '3fd2be6f0c70a2a598f084ddfb75487c'; // This is a demo key for testing\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst MovieList = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // State for movies\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [latestMovies, setLatestMovies] = useState([]);\n  const [topRatedMovies, setTopRatedMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Cast information cache\n  const [castInfo, setCastInfo] = useState({});\n\n  // User preferences for recommendations\n  const [userPreferences, setUserPreferences] = useState({\n    favoriteGenres: [],\n    likedMovies: []\n  });\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState(0); // 0 means all genres\n  const [genres, setGenres] = useState([]);\n  const [activeTab, setActiveTab] = useState('popular');\n\n  // Fetch genres\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\n        const data = await response.json();\n        setGenres([{\n          id: 0,\n          name: 'All'\n        }, ...data.genres]);\n      } catch (err) {\n        console.error('Error fetching genres:', err);\n      }\n    };\n    fetchGenres();\n  }, []);\n\n  // Transform movie data to our format\n  const transformMovieData = movies => {\n    return movies.map(movie => ({\n      id: movie.id,\n      title: movie.title,\n      year: movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown',\n      rating: movie.vote_average,\n      genre: movie.genre_ids,\n      poster: movie.poster_path ? `${IMG_URL}${movie.poster_path}` : null,\n      overview: movie.overview,\n      release_date: movie.release_date\n    }));\n  };\n\n  // Fetch cast for a movie\n  const fetchMovieCast = async movieId => {\n    // Check if we already have the cast information\n    if (castInfo[movieId]) return;\n    try {\n      const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n      const data = await response.json();\n\n      // Get top 3 cast members\n      const cast = data.cast.slice(0, 3).map(actor => ({\n        id: actor.id,\n        name: actor.name,\n        character: actor.character,\n        profile: actor.profile_path ? `${IMG_URL}${actor.profile_path}` : null\n      }));\n\n      // Update cast info state\n      setCastInfo(prev => ({\n        ...prev,\n        [movieId]: cast\n      }));\n    } catch (error) {\n      console.error(`Error fetching cast for movie ${movieId}:`, error);\n    }\n  };\n\n  // Fetch popular movies\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setLoading(true);\n      try {\n        // Popular movies\n        let popularUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n        if (selectedGenre !== 0) {\n          popularUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=popularity.desc`;\n        }\n        const popularResponse = await fetch(popularUrl);\n        const popularData = await popularResponse.json();\n\n        // Latest movies (now playing)\n        let latestUrl = `${BASE_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`;\n        if (selectedGenre !== 0) {\n          latestUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=release_date.desc`;\n        }\n        const latestResponse = await fetch(latestUrl);\n        const latestData = await latestResponse.json();\n\n        // Top rated movies\n        let topRatedUrl = `${BASE_URL}/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`;\n        if (selectedGenre !== 0) {\n          topRatedUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=vote_average.desc&vote_count.gte=1000`;\n        }\n        const topRatedResponse = await fetch(topRatedUrl);\n        const topRatedData = await topRatedResponse.json();\n        const popularMoviesData = transformMovieData(popularData.results);\n        const latestMoviesData = transformMovieData(latestData.results);\n        const topRatedMoviesData = transformMovieData(topRatedData.results);\n        setPopularMovies(popularMoviesData);\n        setLatestMovies(latestMoviesData);\n        setTopRatedMovies(topRatedMoviesData);\n\n        // Fetch cast for all movies\n        const allMovies = [...popularMoviesData, ...latestMoviesData, ...topRatedMoviesData];\n\n        // Create a Set of unique movie IDs\n        const uniqueMovieIds = new Set(allMovies.map(movie => movie.id));\n\n        // Fetch cast for each unique movie\n        uniqueMovieIds.forEach(id => {\n          fetchMovieCast(id);\n        });\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch movies. Please try again later.');\n        console.error('Error fetching movies:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [selectedGenre]);\n\n  // Like/favorite a movie\n  const likeMovie = movieId => {\n    // Find the movie in any of our lists\n    const movie = popularMovies.find(m => m.id === movieId) || latestMovies.find(m => m.id === movieId) || topRatedMovies.find(m => m.id === movieId);\n    if (movie) {\n      // Add movie to liked movies\n      const likedMovies = [...userPreferences.likedMovies, movieId];\n\n      // Update favorite genres based on this movie\n      const movieGenres = movie.genre;\n      const favoriteGenres = [...new Set([...userPreferences.favoriteGenres, ...movieGenres])];\n      setUserPreferences({\n        favoriteGenres,\n        likedMovies\n      });\n    }\n  };\n\n  // Get all available movies for recommendations\n  const getAllMovies = () => {\n    // Combine all movies and remove duplicates\n    const allMovies = [...popularMovies, ...latestMovies, ...topRatedMovies];\n    const uniqueMovies = Array.from(new Map(allMovies.map(movie => [movie.id, movie])).values());\n    return uniqueMovies;\n  };\n\n  // Generate recommendations based on user preferences\n  useEffect(() => {\n    if (userPreferences.favoriteGenres.length > 0) {\n      const allMovies = getAllMovies();\n\n      // Get recommendations based on favorite genres and not already liked\n      const recommendations = allMovies.filter(movie => !userPreferences.likedMovies.includes(movie.id)).filter(movie => {\n        return movie.genre.some(genre => userPreferences.favoriteGenres.includes(genre));\n      }).sort((a, b) => b.rating - a.rating); // Sort by rating\n\n      setRecommendedMovies(recommendations);\n    }\n  }, [userPreferences, popularMovies, latestMovies, topRatedMovies]);\n\n  // Function to get genre names for a movie\n  const getGenreNames = genreIds => {\n    if (!genres.length || !genreIds) return 'Unknown';\n    return genreIds.map(id => {\n      const genre = genres.find(g => g.id === id);\n      return genre ? genre.name : null;\n    }).filter(Boolean).join(', ');\n  };\n\n  // Get current movies based on active tab\n  const getCurrentMovies = () => {\n    switch (activeTab) {\n      case 'latest':\n        return latestMovies;\n      case 'topRated':\n        return topRatedMovies;\n      case 'popular':\n      default:\n        return popularMovies;\n    }\n  };\n\n  // Render cast for a movie\n  const renderCast = movieId => {\n    const cast = castInfo[movieId];\n    if (!cast || cast.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"movie-cast-loading\",\n        children: \"Loading cast...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-cast\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cast-header\",\n        children: [/*#__PURE__*/_jsxDEV(FaUser, {\n          className: \"cast-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), \" Cast\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cast-list\",\n        children: cast.map(actor => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cast-item\",\n          children: [actor.name, \" \", actor.character && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"character-name\",\n            children: [\"as \", actor.character]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 48\n          }, this)]\n        }, actor.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-page-loading\",\n    children: [\"Loading movies\", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 73\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 87\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 101\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-page-error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"back-button\",\n          onClick: () => navigate(\"/home\"),\n          children: [/*#__PURE__*/_jsxDEV(FaArrowLeft, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Back to Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"movie-title\",\n          children: \"Discover Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"genre-filter\",\n          children: [/*#__PURE__*/_jsxDEV(FaFilter, {\n            className: \"filter-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedGenre,\n            onChange: e => setSelectedGenre(Number(e.target.value)),\n            className: \"genre-select\",\n            children: genres.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: genre.id,\n              children: genre.name\n            }, genre.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), recommendedMovies.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recommended-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"section-title\",\n          children: [/*#__PURE__*/_jsxDEV(FaHeart, {\n            className: \"section-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), \"Recommended For You\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-grid\",\n          children: recommendedMovies.slice(0, 4).map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie-poster-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(MoviePoster, {\n                posterUrl: movie.poster,\n                title: movie.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-poster-overlay\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"movie-poster-rating\",\n                  children: [/*#__PURE__*/_jsxDEV(FaStar, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 25\n                  }, this), \" \", movie.rating.toFixed(1)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"movie-card-title\",\n                children: [movie.title, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"movie-year\",\n                  children: [\"(\", movie.year, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 68\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"movie-genres\",\n                children: getGenreNames(movie.genre)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"movie-overview\",\n                children: [movie.overview.substring(0, 100), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 21\n              }, this), renderCast(movie.id), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => likeMovie(movie.id),\n                className: `like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`,\n                disabled: userPreferences.likedMovies.includes(movie.id),\n                children: [/*#__PURE__*/_jsxDEV(FaThumbsUp, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 23\n                }, this), \" \", userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 19\n            }, this)]\n          }, `rec-${movie.id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-tabs\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab-button ${activeTab === 'popular' ? 'active' : ''}`,\n          onClick: () => setActiveTab('popular'),\n          children: [/*#__PURE__*/_jsxDEV(FaFire, {\n            className: \"tab-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), \" Popular\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab-button ${activeTab === 'latest' ? 'active' : ''}`,\n          onClick: () => setActiveTab('latest'),\n          children: [/*#__PURE__*/_jsxDEV(FaClock, {\n            className: \"tab-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), \" Latest Releases\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab-button ${activeTab === 'topRated' ? 'active' : ''}`,\n          onClick: () => setActiveTab('topRated'),\n          children: [/*#__PURE__*/_jsxDEV(FaStar, {\n            className: \"tab-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), \" Top Rated\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-grid\",\n        children: getCurrentMovies().map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-poster-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(MoviePoster, {\n              posterUrl: movie.poster,\n              title: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie-poster-overlay\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-poster-rating\",\n                children: [/*#__PURE__*/_jsxDEV(FaStar, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 21\n                }, this), \" \", movie.rating.toFixed(1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"movie-card-title\",\n              children: [movie.title, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"movie-year\",\n                children: [\"(\", movie.year, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 64\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"movie-genres\",\n              children: getGenreNames(movie.genre)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this), renderCast(movie.id), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => likeMovie(movie.id),\n              className: `like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`,\n              disabled: userPreferences.likedMovies.includes(movie.id),\n              children: [/*#__PURE__*/_jsxDEV(FaThumbsUp, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this), \" \", userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"3rzTWL6JJ3M06YqIkTdMAC7SppE=\", false, function () {\n  return [useNavigate];\n});\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","FaArrowLeft","FaStar","FaThumbsUp","FaClock","FaFire","FaFilter","FaHeart","FaUser","MoviePoster","jsxDEV","_jsxDEV","API_KEY","BASE_URL","IMG_URL","MovieList","_s","navigate","popularMovies","setPopularMovies","latestMovies","setLatestMovies","topRatedMovies","setTopRatedMovies","loading","setLoading","error","setError","castInfo","setCastInfo","userPreferences","setUserPreferences","favoriteGenres","likedMovies","recommendedMovies","setRecommendedMovies","selectedGenre","setSelectedGenre","genres","setGenres","activeTab","setActiveTab","fetchGenres","response","fetch","data","json","id","name","err","console","transformMovieData","movies","map","movie","title","year","release_date","Date","getFullYear","rating","vote_average","genre","genre_ids","poster","poster_path","overview","fetchMovieCast","movieId","cast","slice","actor","character","profile","profile_path","prev","fetchMovies","popularUrl","popularResponse","popularData","latestUrl","latestResponse","latestData","topRatedUrl","topRatedResponse","topRatedData","popularMoviesData","results","latestMoviesData","topRatedMoviesData","allMovies","uniqueMovieIds","Set","forEach","likeMovie","find","m","movieGenres","getAllMovies","uniqueMovies","Array","from","Map","values","length","recommendations","filter","includes","some","sort","a","b","getGenreNames","genreIds","g","Boolean","join","getCurrentMovies","renderCast","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","Number","target","posterUrl","toFixed","substring","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Downloads/firstweb/src/components/MovieList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FaArrowLeft, FaStar, FaThumbsUp, FaClock, FaFire, FaFilter, FaHeart, FaUser } from \"react-icons/fa\";\r\nimport MoviePoster from './MoviePoster';\r\nimport '../App.css';\r\n\r\n// TMDB API key and URLs\r\nconst API_KEY = '3fd2be6f0c70a2a598f084ddfb75487c'; // This is a demo key for testing\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\r\n\r\nconst MovieList = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // State for movies\r\n  const [popularMovies, setPopularMovies] = useState([]);\r\n  const [latestMovies, setLatestMovies] = useState([]);\r\n  const [topRatedMovies, setTopRatedMovies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Cast information cache\r\n  const [castInfo, setCastInfo] = useState({});\r\n  \r\n  // User preferences for recommendations\r\n  const [userPreferences, setUserPreferences] = useState({\r\n    favoriteGenres: [],\r\n    likedMovies: []\r\n  });\r\n\r\n  const [recommendedMovies, setRecommendedMovies] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState(0); // 0 means all genres\r\n  const [genres, setGenres] = useState([]);\r\n  const [activeTab, setActiveTab] = useState('popular');\r\n\r\n  // Fetch genres\r\n  useEffect(() => {\r\n    const fetchGenres = async () => {\r\n      try {\r\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\r\n        const data = await response.json();\r\n        setGenres([{ id: 0, name: 'All' }, ...data.genres]);\r\n      } catch (err) {\r\n        console.error('Error fetching genres:', err);\r\n      }\r\n    };\r\n    \r\n    fetchGenres();\r\n  }, []);\r\n\r\n  // Transform movie data to our format\r\n  const transformMovieData = (movies) => {\r\n    return movies.map(movie => ({\r\n      id: movie.id,\r\n      title: movie.title,\r\n      year: movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown',\r\n      rating: movie.vote_average,\r\n      genre: movie.genre_ids,\r\n      poster: movie.poster_path ? `${IMG_URL}${movie.poster_path}` : null,\r\n      overview: movie.overview,\r\n      release_date: movie.release_date\r\n    }));\r\n  };\r\n\r\n  // Fetch cast for a movie\r\n  const fetchMovieCast = async (movieId) => {\r\n    // Check if we already have the cast information\r\n    if (castInfo[movieId]) return;\r\n    \r\n    try {\r\n      const response = await fetch(\r\n        `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\r\n      );\r\n      const data = await response.json();\r\n      \r\n      // Get top 3 cast members\r\n      const cast = data.cast.slice(0, 3).map(actor => ({\r\n        id: actor.id,\r\n        name: actor.name,\r\n        character: actor.character,\r\n        profile: actor.profile_path ? `${IMG_URL}${actor.profile_path}` : null\r\n      }));\r\n      \r\n      // Update cast info state\r\n      setCastInfo(prev => ({\r\n        ...prev,\r\n        [movieId]: cast\r\n      }));\r\n    } catch (error) {\r\n      console.error(`Error fetching cast for movie ${movieId}:`, error);\r\n    }\r\n  };\r\n\r\n  // Fetch popular movies\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Popular movies\r\n        let popularUrl = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\r\n        if (selectedGenre !== 0) {\r\n          popularUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=popularity.desc`;\r\n        }\r\n        const popularResponse = await fetch(popularUrl);\r\n        const popularData = await popularResponse.json();\r\n        \r\n        // Latest movies (now playing)\r\n        let latestUrl = `${BASE_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`;\r\n        if (selectedGenre !== 0) {\r\n          latestUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=release_date.desc`;\r\n        }\r\n        const latestResponse = await fetch(latestUrl);\r\n        const latestData = await latestResponse.json();\r\n        \r\n        // Top rated movies\r\n        let topRatedUrl = `${BASE_URL}/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`;\r\n        if (selectedGenre !== 0) {\r\n          topRatedUrl = `${BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${selectedGenre}&sort_by=vote_average.desc&vote_count.gte=1000`;\r\n        }\r\n        const topRatedResponse = await fetch(topRatedUrl);\r\n        const topRatedData = await topRatedResponse.json();\r\n        \r\n        const popularMoviesData = transformMovieData(popularData.results);\r\n        const latestMoviesData = transformMovieData(latestData.results);\r\n        const topRatedMoviesData = transformMovieData(topRatedData.results);\r\n        \r\n        setPopularMovies(popularMoviesData);\r\n        setLatestMovies(latestMoviesData);\r\n        setTopRatedMovies(topRatedMoviesData);\r\n        \r\n        // Fetch cast for all movies\r\n        const allMovies = [\r\n          ...popularMoviesData,\r\n          ...latestMoviesData,\r\n          ...topRatedMoviesData\r\n        ];\r\n        \r\n        // Create a Set of unique movie IDs\r\n        const uniqueMovieIds = new Set(allMovies.map(movie => movie.id));\r\n        \r\n        // Fetch cast for each unique movie\r\n        uniqueMovieIds.forEach(id => {\r\n          fetchMovieCast(id);\r\n        });\r\n        \r\n        setError(null);\r\n      } catch (err) {\r\n        setError('Failed to fetch movies. Please try again later.');\r\n        console.error('Error fetching movies:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchMovies();\r\n  }, [selectedGenre]);\r\n\r\n  // Like/favorite a movie\r\n  const likeMovie = (movieId) => {\r\n    // Find the movie in any of our lists\r\n    const movie = \r\n      popularMovies.find(m => m.id === movieId) || \r\n      latestMovies.find(m => m.id === movieId) || \r\n      topRatedMovies.find(m => m.id === movieId);\r\n\r\n    if (movie) {\r\n      // Add movie to liked movies\r\n      const likedMovies = [...userPreferences.likedMovies, movieId];\r\n      \r\n      // Update favorite genres based on this movie\r\n      const movieGenres = movie.genre;\r\n      const favoriteGenres = [...new Set([...userPreferences.favoriteGenres, ...movieGenres])];\r\n      \r\n      setUserPreferences({\r\n        favoriteGenres,\r\n        likedMovies\r\n      });\r\n    }\r\n  };\r\n\r\n  // Get all available movies for recommendations\r\n  const getAllMovies = () => {\r\n    // Combine all movies and remove duplicates\r\n    const allMovies = [...popularMovies, ...latestMovies, ...topRatedMovies];\r\n    const uniqueMovies = Array.from(new Map(allMovies.map(movie => [movie.id, movie])).values());\r\n    return uniqueMovies;\r\n  };\r\n\r\n  // Generate recommendations based on user preferences\r\n  useEffect(() => {\r\n    if (userPreferences.favoriteGenres.length > 0) {\r\n      const allMovies = getAllMovies();\r\n      \r\n      // Get recommendations based on favorite genres and not already liked\r\n      const recommendations = allMovies\r\n        .filter(movie => !userPreferences.likedMovies.includes(movie.id))\r\n        .filter(movie => {\r\n          return movie.genre.some(genre => userPreferences.favoriteGenres.includes(genre));\r\n        })\r\n        .sort((a, b) => b.rating - a.rating); // Sort by rating\r\n      \r\n      setRecommendedMovies(recommendations);\r\n    }\r\n  }, [userPreferences, popularMovies, latestMovies, topRatedMovies]);\r\n\r\n  // Function to get genre names for a movie\r\n  const getGenreNames = (genreIds) => {\r\n    if (!genres.length || !genreIds) return 'Unknown';\r\n    \r\n    return genreIds\r\n      .map(id => {\r\n        const genre = genres.find(g => g.id === id);\r\n        return genre ? genre.name : null;\r\n      })\r\n      .filter(Boolean)\r\n      .join(', ');\r\n  };\r\n\r\n  // Get current movies based on active tab\r\n  const getCurrentMovies = () => {\r\n    switch(activeTab) {\r\n      case 'latest':\r\n        return latestMovies;\r\n      case 'topRated':\r\n        return topRatedMovies;\r\n      case 'popular':\r\n      default:\r\n        return popularMovies;\r\n    }\r\n  };\r\n\r\n  // Render cast for a movie\r\n  const renderCast = (movieId) => {\r\n    const cast = castInfo[movieId];\r\n    \r\n    if (!cast || cast.length === 0) {\r\n      return <p className=\"movie-cast-loading\">Loading cast...</p>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"movie-cast\">\r\n        <div className=\"cast-header\">\r\n          <FaUser className=\"cast-icon\" /> Cast\r\n        </div>\r\n        <div className=\"cast-list\">\r\n          {cast.map(actor => (\r\n            <div key={actor.id} className=\"cast-item\">\r\n              {actor.name} {actor.character && <span className=\"character-name\">as {actor.character}</span>}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (loading) return <div className=\"movie-page-loading\">Loading movies<span>.</span><span>.</span><span>.</span></div>;\r\n  if (error) return <div className=\"movie-page-error\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"movie-page\">\r\n      <div className=\"movie-container\">\r\n        <div className=\"movie-header\">\r\n          <div className=\"back-button\" onClick={() => navigate(\"/home\")}>\r\n            <FaArrowLeft />\r\n            <span>Back to Home</span>\r\n          </div>\r\n          \r\n          <h1 className=\"movie-title\">Discover Movies</h1>\r\n          \r\n          {/* Genre Filter */}\r\n          <div className=\"genre-filter\">\r\n            <FaFilter className=\"filter-icon\" />\r\n            <select \r\n              value={selectedGenre} \r\n              onChange={(e) => setSelectedGenre(Number(e.target.value))}\r\n              className=\"genre-select\"\r\n            >\r\n              {genres.map(genre => (\r\n                <option key={genre.id} value={genre.id}>{genre.name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Recommended Movies Section */}\r\n        {recommendedMovies.length > 0 && (\r\n          <div className=\"recommended-section\">\r\n            <h2 className=\"section-title\">\r\n              <FaHeart className=\"section-icon\" /> \r\n              Recommended For You\r\n            </h2>\r\n            <div className=\"movie-grid\">\r\n              {recommendedMovies.slice(0, 4).map(movie => (\r\n                <div key={`rec-${movie.id}`} className=\"movie-card\">\r\n                  <div className=\"movie-poster-wrapper\">\r\n                    <MoviePoster posterUrl={movie.poster} title={movie.title} />\r\n                    <div className=\"movie-poster-overlay\">\r\n                      <div className=\"movie-poster-rating\">\r\n                        <FaStar /> {movie.rating.toFixed(1)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"movie-info\">\r\n                    <h3 className=\"movie-card-title\">{movie.title} <span className=\"movie-year\">({movie.year})</span></h3>\r\n                    <p className=\"movie-genres\">{getGenreNames(movie.genre)}</p>\r\n                    <p className=\"movie-overview\">{movie.overview.substring(0, 100)}...</p>\r\n                    {renderCast(movie.id)}\r\n                    <button \r\n                      onClick={() => likeMovie(movie.id)}\r\n                      className={`like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`}\r\n                      disabled={userPreferences.likedMovies.includes(movie.id)}\r\n                    >\r\n                      <FaThumbsUp /> {userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like'}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Movie Categories Tabs */}\r\n        <div className=\"movie-tabs\">\r\n          <button \r\n            className={`tab-button ${activeTab === 'popular' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('popular')}\r\n          >\r\n            <FaFire className=\"tab-icon\" /> Popular\r\n          </button>\r\n          <button \r\n            className={`tab-button ${activeTab === 'latest' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('latest')}\r\n          >\r\n            <FaClock className=\"tab-icon\" /> Latest Releases\r\n          </button>\r\n          <button \r\n            className={`tab-button ${activeTab === 'topRated' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('topRated')}\r\n          >\r\n            <FaStar className=\"tab-icon\" /> Top Rated\r\n          </button>\r\n        </div>\r\n        \r\n        {/* Movies Grid */}\r\n        <div className=\"movie-grid\">\r\n          {getCurrentMovies().map(movie => (\r\n            <div key={movie.id} className=\"movie-card\">\r\n              <div className=\"movie-poster-wrapper\">\r\n                <MoviePoster posterUrl={movie.poster} title={movie.title} />\r\n                <div className=\"movie-poster-overlay\">\r\n                  <div className=\"movie-poster-rating\">\r\n                    <FaStar /> {movie.rating.toFixed(1)}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"movie-info\">\r\n                <h3 className=\"movie-card-title\">{movie.title} <span className=\"movie-year\">({movie.year})</span></h3>\r\n                <p className=\"movie-genres\">{getGenreNames(movie.genre)}</p>\r\n                {renderCast(movie.id)}\r\n                <button \r\n                  onClick={() => likeMovie(movie.id)}\r\n                  className={`like-button ${userPreferences.likedMovies.includes(movie.id) ? 'liked' : ''}`}\r\n                  disabled={userPreferences.likedMovies.includes(movie.id)}\r\n                >\r\n                  <FaThumbsUp /> {userPreferences.likedMovies.includes(movie.id) ? 'Liked' : 'Like'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}